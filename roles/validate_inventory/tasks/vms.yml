- name: Get all KVM Nodes
  vars:
    kvm_node_names: []
  set_fact:
    kvm_node_names: "{{ kvm_node_names }} + {{ [item] }}"
  when: hostvars[item]['vendor'] == 'KVM'
  loop: "{{ groups['nodes'] }}"

- name: Assert that a host is defined in the 'vm_hosts' group if needed
  assert:
    that:
      - groups['vm_hosts'] is defined
      - groups['vm_hosts'] | length > 0
    quiet: true
  when: (kvm_node_names is defined) and (kvm_node_names | length > 0)

- name: Check KVM BMC username password combinations
  block:
    - name: Get KVM BMC username password combinations1
      vars:
        kvm_user_password_combinations: {}
      set_fact:
        kvm_user_password_combinations: "{{
          kvm_user_password_combinations | combine({
            hostvars[item]['vm_host'] + '.' + hostvars[item]['bmc_user']: (
              kvm_user_password_combinations[hostvars[item]['vm_host'] + '.' + hostvars[item]['bmc_user']] | default([]) + [hostvars[item]['bmc_password']]
            ) | unique
          })
        }}"
      loop: "{{ kvm_node_names }}"

    - name: Fail mutliple bmc passwords for the same bmc user and vm host.
      fail:
        msg: "For vm host {{ item.key.split('.')[0] }}: bmc_user ({{ item.key.split('.')[1] }}) and bmc_password combinations for a single host must be unique"
      when: item.value | length > 1
      loop: "{{ kvm_user_password_combinations | dict2items }}"

  when: (kvm_node_names is defined) and (kvm_node_names | length > 0)
