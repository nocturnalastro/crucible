---
- name: DELL Power Off
  community.general.redfish_command:
    category: Systems
    command: PowerGracefulShutdown
    baseuri: "{{ bmc_address }}"
    username: "{{ bmc_user }}"
    password: "{{ bmc_password }}"
  ignore_errors: True # We're checking if is off in the next block

- block:
    - name: DELL Wait for machine to Shutdown
      community.general.redfish_info:
        category: Systems
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
      register: system_inventory  
      until: (system_inventory |  json_query(filter_str) | length) == 0
      retries: 10
      delay: 30
      vars:
        filter_str: "redfish_facts.system.entries[] | [?PowerState == 'On']"
  rescue:
    - name: DELL Force Power Off
      community.general.redfish_command:
        category: Systems
        command: PowerForceOff
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
      register: res
      until: ("The read operation timed out" not in res.msg)
      retries: 6
      delay: 10

- when: dell_clear_rhel_uefi_entries | bool
  block:
    - name: Get boot options
      uri: 
        url: "https://{{ bmc_address }}/redfish/v1/Systems/System.Embedded.1/BootOptions"
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        method: GET
        status_code: [200]
        force_basic_auth: no
        validate_certs: no
        return_content: yes
      register: boot_options

    - name: Get info for boot options
      uri:
        url:  "https://{{ bmc_address }}{{ item['@odata.id'] }}"
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        method: GET
        force_basic_auth: no
        validate_certs: no
        return_content: yes
      register: boot_option_entries
      loop: "{{ boot_options.json.Members }}"

    - name: Disable RHEL boot options
      uri:
        url:  "https://{{ bmc_address }}{{ item.json['@odata.id'] }}"
        user: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        method: PATCH
        body_format: json
        body: {
          BootOptionEnabled: False
        }
        force_basic_auth: no
        validate_certs: no
      loop: "{{ boot_option_entries.results }}"
      when: ("redhat" in item.json.UefiDevicePath) and item.json.BootOptionEnabled | bool

- block:
    - name: Set Dell OneTimeBoot VirtualCD (VCD-DVD)
      community.general.redfish_command:
        category: Systems
        command: SetOneTimeBoot
        bootdevice: VCD-DVD
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
      register: res
      until: ("The read operation timed out" not in res.msg)
      retries: 6
      delay: 10
  rescue:
    - name: Set Dell OneTimeBoot VirtualCD (Cd)
      community.general.redfish_command:
        category: Systems
        command: SetOneTimeBoot
        bootdevice: Cd
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
      register: res
      until: ("The read operation timed out" not in res.msg)
      retries: 6
      delay: 10

- block:
    - name: DELL Eject Virtual Media (if any)
      community.general.redfish_command:
        category: Manager
        command: VirtualMediaEject
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        virtual_media:
          image_url: "{{ boot_iso_url }}"
        resource_id: iDRAC.Embedded.1
  rescue:
    - name: Get Virtual Media information
      community.general.redfish_info:
        category: Manager
        command: GetVirtualMedia
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
      register: result

    - name: Get blocking virtual_media
      set_fact:
        blocking_virtual_media:  "{{ result.redfish_facts.virtual_media.entries
            | flatten(levels=2)
            | selectattr('ConnectedVia', 'defined') | list
            | json_query('[?(
                ConnectedVia == `URI`
                && Image != null
                && (
                  contains(MediaTypes, `CD`)
                  || contains(MediaTypes, `DVD`)
                  || contains(MediaTypes, `VCD-DVD`)
                )
              )]'
            ) | from_yaml
          }}"

    - debug: # noqa unnamed-task
        var: blocking_virtual_media
        verbosity: 1

    - name: Attempting to eject blocking media
      community.general.redfish_command:
        category: Manager
        command: VirtualMediaEject
        baseuri: "{{ bmc_address }}"
        username: "{{ bmc_user }}"
        password: "{{ bmc_password }}"
        virtual_media:
          image_url: "{{ item.Image }}"
        resource_id: iDRAC.Embedded.1
      loop: "{{ blocking_virtual_media }}"
      no_log: True

- name: DELL Insert Virtual Media
  community.general.redfish_command:
    category: Manager
    command: VirtualMediaInsert
    baseuri: "{{ bmc_address }}"
    username: "{{ bmc_user }}"
    password: "{{ bmc_password }}"
    virtual_media:
      image_url: '{{ boot_iso_url }}'
      media_types:
        - CD
        - DVD
    resource_id: iDRAC.Embedded.1

- name: DELL Restart system power gracefully
  community.general.redfish_command:
    category: Systems
    command: PowerOn
    baseuri: "{{ bmc_address }}"
    username: "{{ bmc_user }}"
    password: "{{ bmc_password }}"
  register: power_on
  until: power_on is succeeded
  retries: 6
  delay: 20
